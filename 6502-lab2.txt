define SIDE1 $15; First input
define SIDE2 $16; Second input
define SIDE3 $17; Third input

;ASCII keyboard declarations
define ENTER $0d; ENTER key
define BACKSPACE $08; BACKSPACE key
define RIGHT $81; RIGHT key
define LEFT $83; LEFT key

;Define screen dimensions
define SCREEN $ffed; Screen size
define PLOT $fff0; Cursor control
define SCINIT $ff81; Screen init
define CHRIN $ffcf; Char input
define CHROUT $ffd2; Char output

jsr SCINIT

mainLoop:
     ldy #$00
     jsr titleText ; Title

     ldy #$00
     jsr firstSideInput ; Get first number
     jsr handleInput
     jsr firstSideStore

     ldy #$00
     jsr secondSideInput ; Get second number
     jsr handleInput
     jsr secondSideStore

     ldy #$00
     jsr thirdSideInput ; Get third number
     jsr handleInput
     jsr thirdSideStore

     ldy #$00
     jsr resultText  ; Show result label
     jsr calculateResult ; Calculate and show result

handleInput:
     sec
     jsr PLOT
     ldx #$15
     clc
     jsr PLOT

handleInputLoop:
     sec
     jsr PLOT
     jsr CHRIN

keyboardCheck: 
     cmp #BACKSPACE ; Handle BACKSPACE
     beq delete

     cmp #RIGHT ; Move to first digit
     beq moveR

     cmp #LEFT ; Move to second digit
     beq moveL

     cmp #ENTER ; Confirm input
     beq move

handleInput:
     cmp #$30
     bcc handleInputLoop

     clc
     cmp #$3a
     bcs handleInputLoop
     jsr CHROUT

     sec
     jsr PLOT
     cpx #$17
     bne handleInputLoop
     dex
     clc
     jsr PLOT
     jmp handleInputLoop

moveL: 
 cpx #$15
     beq handleInputLoop
     jsr CHROUT
     jmp handleInputLoop

moveR: 
 cpx #$16
     beq handleInputLoop
     jsr CHROUT
     jmp handleInputLoop

delete:
 cpx #$15
     beq handleInputLoop
     jsr CHROUT
     jmp handleInputLoop

move:
     sec             ; Set carry flag before subtraction 
     jsr PLOT         
     ldx #$15        ; Load X register with value $15 for further operations
     clc            
     jsr PLOT       
     sec             
     jsr PLOT        ; Call PLOT subroutine again

     clc             ; Clear carry flag before subtraction
     sbc #$2F        ; Subtract hexadecimal value $2F from accumulator

     asl             ; Arithmetic shift left by 1 bit x4
     asl
     asl
     asl

     pha             ; Push accumulator onto stack to save current state

     ldx #$16        ; Load X register with $16 for next operations
     clc             ; Clear carry flag for addition in PLOT subroutine
     jsr PLOT        ; Call PLOT subroutine to plot a point
     sec             ; Set carry flag before subtraction in PLOT subroutine
     jsr PLOT        ; Call PLOT subroutine again

     clc             
     sbc #$2F        ; Subtract hexadecimal value $2F from accumulator
     pha             ; Push accumulator onto stack to save current state

     ldx #$00        ; Reset X register to $00
     iny             ; Increment Y register
     clc             
     jsr PLOT        
     sec             
     jsr PLOT        ; Call PLOT subroutine again

     pla             ; Pull accumulator from stack, restoring its previous state
     tax             ; Transfer accumulator to X register
     pla             ; Pull accumulator from stack again, restoring its state from earlier save

     rts             ; Return from subroutine

firstSideStore:
     sta SIDE1       ; Store accumulator in SIDE1
     txa             ; Transfer X register to accumulator
     eor SIDE1       ; Exclusive OR accumulator with SIDE1 to update value
     sta SIDE1       ; Store updated value back in SIDE1
     rts             ; Return from subroutine

secondSideStore:
     sta SIDE2       ; Store accumulator in SIDE2
     txa            
     eor SIDE2      
     sta SIDE2      
     rts            

thirdSideStore:
    sta SIDE3        ; Store accumulator in SIDE3
    txa             
    eor SIDE3       
    sta SIDE3       
    rts             

processInput:
     lsr             ; Logical shift right, dividing accumulator by 2, four times effectively dividing by 16
     lsr
     lsr
     lsr
     clc             ; Clear carry flag for addition
     adc #$30        ; Add hexadecimal value $30 to accumulator to convert binary coded decimal to ASCII
     jsr CHROUT      ; Output character to screen

     pla             ; Pull accumulator from stack, restoring its previous state
     and #$0F        ; Perform AND operation with $0F to isolate lower 4 bits
     clc             
     adc #$30        ; Add hexadecimal value $30 to convert to ASCII
     jsr CHROUT      

     sec             
     jsr PLOT        ; Call PLOT subroutine to plot a point
     ldx #$00        
     iny             
     clc             
     jsr PLOT        ; Call PLOT subroutine to plot another point

     rts             ; Return from subroutine

calculateResult:
    sec             ; Set carry flag before subtraction in PLOT subroutine
    jsr PLOT        ; Call PLOT subroutine to plot a point
    ldx #$15        ; Load X register with value $15 for further operations
    clc             ; Clear carry flag for addition in PLOT subroutine
    jsr PLOT        
    sec             ; Set carry flag before subtraction in PLOT subroutine
    jsr PLOT        ; Call PLOT subroutine again

    sed             ; Set decimal mode for addition
    lda SIDE1       ; Load SIDE1 into accumulator
    adc SIDE2       ; Add SIDE2 to accumulator with carry
    adc SIDE3       ; Add SIDE3 to accumulator with carry
    cld             
    pha             ; Push accumulator onto stack to save result

    bcc processInput ; Branch to processInput if carry flag is clear
    ldx #$14        ; Load X register with $14 for next operations
    clc             ; Clear carry flag for addition in PLOT subroutine
    jsr PLOT        ; Call PLOT subroutine to plot a point
    sec             
    jsr PLOT        ; Call PLOT subroutine again
    lda #$31        ; Load accumulator with $31 (ASCII for "1")
    jsr CHROUT      ; Output character to screen

title:
dcb "F","I","N","D",32,"P","E","R","I","M","E","T","E","R",32,32,"P",32,"=",32,"A","+","B","+","C"
dcb $0A ; New line
dcb 00

firstSide:
dcb "E","N","T","E","R",32,"B","A","S","E",":"
dcb 00

secondSide:
dcb "E","N","T","E","R",32,"S","I","D","E",32,"#","1",":"
dcb 00

thirdSide:
dcb "E","N","T","E","R",32,"S","I","D","E",32,"#","2",":"
dcb 00

resultStr:
dcb "T","R","I","A","N","G","L","E",32,"P","E","R","I","M","E","T","E","R",":"
dcb 00

titleText:
 lda title,y
	beq goback_main
	jsr CHROUT
	iny
	bne titleText

firstSideInput:
 lda firstSide,y
        beq goback_main
        jsr CHROUT
        iny
        bne firstSideInput

secondSideInput:
 lda secondSide,y
        beq goback_main
        jsr CHROUT
        iny
        bne secondSideInput

thirdSideInput:
 lda thirdSide,y
        beq goback_main
        jsr CHROUT
        iny
        bne thirdSideInput

resultText:
 lda resultStr,y
        beq goback_main
        jsr CHROUT
        iny
        bne resultText

goback_main:
     rts
